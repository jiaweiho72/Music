{"version":3,"sources":["index.tsx"],"names":["DashedCircle","dashedStrokeConfig","count","width","circleCircumference","inActiveStrokeWidth","activeStrokeWidth","inactiveCircleRadius","activeCircleRadius","strokeDashArray","totalDashSpace","dashGap","strokeWidth","Math","max","radius","COLORS","WHITE","TRANSPARENT","React","memo"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAGA,MAAMA,YAAyC,GAAG,QAOzB;AAAA,MAP0B;AACjDC,IAAAA,kBAAkB,GAAG;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,KAAK,EAAE;AAAnB,KAD4B;AAEjDC,IAAAA,mBAFiD;AAGjDC,IAAAA,mBAHiD;AAIjDC,IAAAA,iBAJiD;AAKjDC,IAAAA,oBALiD;AAMjDC,IAAAA;AANiD,GAO1B;AACvB,QAAMC,eAAe,GAAG,oBAAQ,MAAM;AACpC,UAAMC,cAAc,GAAGT,kBAAkB,CAACE,KAAnB,GAA2BF,kBAAkB,CAACC,KAArE;AACA,UAAMS,OAAO,GACX,CAACP,mBAAmB,GAAGM,cAAvB,IAAyCT,kBAAkB,CAACC,KAD9D;AAEA,WAAQ,GAAED,kBAAkB,CAACE,KAAM,IAAGQ,OAAQ,EAA9C;AACD,GALuB,EAKrB,CAACP,mBAAD,EAAsBH,kBAAtB,CALqB,CAAxB;AAOA,QAAMW,WAAW,GAAG,oBAClB,MAAMC,IAAI,CAACC,GAAL,CAAST,mBAAT,EAA8BC,iBAA9B,CADY,EAElB,CAACD,mBAAD,EAAsBC,iBAAtB,CAFkB,CAApB;AAIA,QAAMS,MAAM,GAAG,oBACb,MAAMF,IAAI,CAACC,GAAL,CAASP,oBAAT,EAA+BC,kBAA/B,CADO,EAEb,CAACD,oBAAD,EAAuBC,kBAAvB,CAFa,CAAf;;AAKA,MAAI,CAAAP,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,YAAAA,kBAAkB,CAAEC,KAApB,IAA4B,CAA5B,IAAiC,CAAAD,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,YAAAA,kBAAkB,CAAEE,KAApB,IAA4B,CAAjE,EAAoE;AAClE,wBACE,6BAAC,oBAAD,qBACE,6BAAC,oBAAD;AAAM,MAAA,EAAE,EAAC;AAAT,oBACE,6BAAC,sBAAD;AACE,MAAA,EAAE,EAAC,KADL;AAEE,MAAA,EAAE,EAAC,KAFL;AAGE,MAAA,MAAM,EAAEa,gBAAOC,KAHjB;AAIE,MAAA,IAAI,EAAED,gBAAOE,WAJf;AAKE,MAAA,WAAW,EAAEN,WALf;AAME,MAAA,CAAC,EAAEG,MANL;AAOE,MAAA,aAAa,EAAE,CAPjB;AAQE,MAAA,eAAe,EAAEN;AARnB,MADF,CADF,CADF;AAgBD;;AACD,SAAO,IAAP;AACD,CA3CD;;4BA6CeU,eAAMC,IAAN,CAAWpB,YAAX,C","sourcesContent":["import React, { useMemo } from 'react';\nimport { Circle, Defs, Mask } from 'react-native-svg';\nimport COLORS from '../../utils/colors';\nimport type { DashedCircleProps } from '../../types';\n\nconst DashedCircle: React.FC<DashedCircleProps> = ({\n  dashedStrokeConfig = { count: 0, width: 0 },\n  circleCircumference,\n  inActiveStrokeWidth,\n  activeStrokeWidth,\n  inactiveCircleRadius,\n  activeCircleRadius,\n}: DashedCircleProps) => {\n  const strokeDashArray = useMemo(() => {\n    const totalDashSpace = dashedStrokeConfig.width * dashedStrokeConfig.count;\n    const dashGap =\n      (circleCircumference - totalDashSpace) / dashedStrokeConfig.count;\n    return `${dashedStrokeConfig.width} ${dashGap}`;\n  }, [circleCircumference, dashedStrokeConfig]);\n\n  const strokeWidth = useMemo(\n    () => Math.max(inActiveStrokeWidth, activeStrokeWidth),\n    [inActiveStrokeWidth, activeStrokeWidth],\n  );\n  const radius = useMemo(\n    () => Math.max(inactiveCircleRadius, activeCircleRadius),\n    [inactiveCircleRadius, activeCircleRadius],\n  );\n\n  if (dashedStrokeConfig?.count > 0 && dashedStrokeConfig?.width > 0) {\n    return (\n      <Defs>\n        <Mask id=\"dashed-circle\">\n          <Circle\n            cx=\"50%\"\n            cy=\"50%\"\n            stroke={COLORS.WHITE}\n            fill={COLORS.TRANSPARENT}\n            strokeWidth={strokeWidth}\n            r={radius}\n            strokeOpacity={1}\n            strokeDasharray={strokeDashArray}\n          />\n        </Mask>\n      </Defs>\n    );\n  }\n  return null;\n};\n\nexport default React.memo(DashedCircle);\n"]}