{"version":3,"sources":["index.tsx"],"names":["AnimatedCircle","Animated","createAnimatedComponent","Circle","ProgressCircle","circleBackgroundColor","COLORS","TRANSPARENT","radius","strokeLinecap","activeStrokeColor","GREEN","activeStrokeSecondaryColor","activeStrokeWidth","inActiveStrokeColor","BLACK_30","inActiveStrokeWidth","inActiveStrokeOpacity","dashedStrokeConfig","animatedCircleProps","viewBox","Math","max","inactiveCircleRadius","activeCircleRadius","circleCircumference","maskId","count","width","undefined","strokeColor","styles","svg"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport Svg, { G, Circle } from 'react-native-svg';\nimport Animated from 'react-native-reanimated';\nimport useCircleValues from '../../hooks/useCircleValues';\nimport COLORS from '../../utils/colors';\nimport type { ProgressCircleProps } from '../../types';\nimport CircleGradient from '../circleGradient';\nimport styles from './styles';\nimport DashedCircle from '../dashedCircle';\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\nconst ProgressCircle: React.FC<ProgressCircleProps> = ({\n  circleBackgroundColor = COLORS.TRANSPARENT,\n  radius = 60,\n  strokeLinecap = 'round',\n  activeStrokeColor = COLORS.GREEN,\n  activeStrokeSecondaryColor = null,\n  activeStrokeWidth = 10,\n  inActiveStrokeColor = COLORS.BLACK_30,\n  inActiveStrokeWidth = 10,\n  inActiveStrokeOpacity = 1,\n  dashedStrokeConfig,\n  animatedCircleProps,\n}: ProgressCircleProps) => {\n  const viewBox = useMemo(\n    () => radius + Math.max(activeStrokeWidth, inActiveStrokeWidth),\n    [radius, activeStrokeWidth, inActiveStrokeWidth]\n  );\n  const {\n    inactiveCircleRadius,\n    activeCircleRadius,\n    circleCircumference,\n  } = useCircleValues({\n    radius,\n    activeStrokeWidth,\n    inActiveStrokeWidth,\n  });\n\n  const maskId = useMemo(\n    () =>\n      dashedStrokeConfig &&\n      dashedStrokeConfig?.count > 0 &&\n      dashedStrokeConfig?.width > 0\n        ? 'url(#dashed-circle)'\n        : undefined,\n    [dashedStrokeConfig]\n  );\n\n  const strokeColor = useMemo(\n    () => (activeStrokeSecondaryColor ? 'url(#grad)' : activeStrokeColor),\n    [activeStrokeSecondaryColor, activeStrokeColor]\n  );\n\n  return (\n    <Svg\n      width={radius * 2}\n      height={radius * 2}\n      viewBox={`0 0 ${viewBox * 2} ${viewBox * 2}`}\n      style={styles.svg}\n    >\n      <CircleGradient\n        activeStrokeColor={activeStrokeColor}\n        activeStrokeSecondaryColor={activeStrokeSecondaryColor}\n      />\n      <DashedCircle\n        circleCircumference={circleCircumference}\n        inActiveStrokeWidth={inActiveStrokeWidth}\n        activeStrokeWidth={activeStrokeWidth}\n        inactiveCircleRadius={inactiveCircleRadius}\n        activeCircleRadius={activeCircleRadius}\n        dashedStrokeConfig={dashedStrokeConfig}\n      />\n      <G mask={maskId}>\n        <Circle\n          cx=\"50%\"\n          cy=\"50%\"\n          stroke={inActiveStrokeColor}\n          strokeWidth={inActiveStrokeWidth}\n          r={inactiveCircleRadius}\n          fill={circleBackgroundColor}\n          strokeOpacity={inActiveStrokeOpacity}\n        />\n        <AnimatedCircle\n          cx=\"50%\"\n          cy=\"50%\"\n          stroke={strokeColor}\n          strokeWidth={activeStrokeWidth}\n          r={activeCircleRadius}\n          fill={COLORS.TRANSPARENT}\n          strokeDasharray={circleCircumference}\n          strokeLinecap={strokeLinecap}\n          animatedProps={animatedCircleProps}\n        />\n      </G>\n    </Svg>\n  );\n};\n\nexport default ProgressCircle;\n"]}