{"version":3,"sources":["useAnimatedValue.ts"],"names":["useAnimatedValue","initialValue","radius","maxValue","clockwise","delay","value","duration","onAnimationComplete","activeStrokeWidth","inActiveStrokeWidth","progressFormatter","v","Math","round","animatedValue","circleCircumference","animatedCircleProps","biggestValue","max","maxPercentage","strokeDashoffset","easing","Easing","linear","isFinished","progressValue","animatedTextProps","text"],"mappings":";;;;;;;AAAA;;AACA;;AASA;;;;AAkBe,SAASA,gBAAT,OAgBW;AAAA,MAhBe;AACvCC,IAAAA,YAAY,GAAG,CADwB;AAEvCC,IAAAA,MAAM,GAAG,EAF8B;AAGvCC,IAAAA,QAAQ,GAAG,GAH4B;AAIvCC,IAAAA,SAJuC;AAKvCC,IAAAA,KAAK,GAAG,CAL+B;AAMvCC,IAAAA,KANuC;AAOvCC,IAAAA,QAPuC;AAQvCC,IAAAA,mBAAmB,GAAG,MAAM,IARW;AASvCC,IAAAA,iBAAiB,GAAG,EATmB;AAUvCC,IAAAA,mBAAmB,GAAG,EAViB;AAWvCC,IAAAA,iBAAiB,GAAIC,CAAD,IAAe;AACjC;;AAEA,aAAOC,IAAI,CAACC,KAAL,CAAWF,CAAX,CAAP;AACD;AAfsC,GAgBf;AACxB,QAAMG,aAAa,GAAG,2CAAed,YAAf,CAAtB;AACA,QAAM;AAAEe,IAAAA;AAAF,MAA0B,8BAAgB;AAC9Cd,IAAAA,MAD8C;AAE9CO,IAAAA,iBAF8C;AAG9CC,IAAAA;AAH8C,GAAhB,CAAhC;AAMA,QAAMO,mBAAmB,GAAG,6CAAiB,MAAM;AACjD,QAAIC,YAAoB,GAAGL,IAAI,CAACM,GAAL,CAASlB,YAAT,EAAuBE,QAAvB,CAA3B;AACAe,IAAAA,YAAY,GAAGA,YAAY,IAAI,CAAhB,GAAoB,CAApB,GAAwBA,YAAvC;AACA,UAAME,aAAqB,GAAGhB,SAAS,GAClC,MAAMW,aAAa,CAACT,KAArB,GAA8BY,YADK,GAElC,MAAM,CAACH,aAAa,CAACT,KAAtB,GAA+BY,YAFnC;AAGA,WAAO;AACLG,MAAAA,gBAAgB,EACdL,mBAAmB,GAAIA,mBAAmB,GAAGI,aAAvB,GAAwC;AAF3D,KAAP;AAID,GAV2B,CAA5B;AAYA,wBAAU,MAAM;AACdL,IAAAA,aAAa,CAACT,KAAd,GAAsB,sCACpBD,KADoB,EAEpB,uCAAWC,KAAX,EAAkB;AAAEC,MAAAA,QAAF;AAAYe,MAAAA,MAAM,EAAEC,8BAAOC;AAA3B,KAAlB,EAAwDC,UAAD,IAAgB;AACrE,UAAIA,UAAJ,EAAgB;AAAA;;AACd,wDAAQjB,mBAAR;AACD;AACF,KAJD,CAFoB,CAAtB;AAQD,GATD,EASG,CAACF,KAAD,CATH;AAWA,QAAMoB,aAAa,GAAG,4CAAgB,MAAM;AAC1C,WAAQ,GAAEf,iBAAiB,CAACI,aAAa,CAACT,KAAf,CAAsB,EAAjD;AACD,GAFqB,CAAtB;AAIA,QAAMqB,iBAAiB,GAAG,6CAAiB,MAAM;AAC/C,WAAO;AACLC,MAAAA,IAAI,EAAEF,aAAa,CAACpB;AADf,KAAP;AAGD,GAJyB,CAA1B;AAMA,SAAO;AACLW,IAAAA,mBADK;AAELU,IAAAA,iBAFK;AAGLD,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["import { useEffect } from 'react';\nimport {\n  Easing,\n  runOnJS,\n  useAnimatedProps,\n  useDerivedValue,\n  useSharedValue,\n  withDelay,\n  withTiming,\n} from 'react-native-reanimated';\nimport useCircleValues from './useCircleValues';\n\nexport interface UseAnimatedValueProps {\n  value: number;\n  initialValue?: number;\n  radius?: number;\n  duration?: number;\n  delay?: number;\n  maxValue?: number;\n  onAnimationComplete?: () => void;\n  activeStrokeWidth?: number;\n  inActiveStrokeWidth?: number;\n  clockwise?: boolean;\n  valueSuffix?: string;\n  valuePrefix?: string;\n  progressFormatter?: (v: number) => number | string;\n}\n\nexport default function useAnimatedValue({\n  initialValue = 0,\n  radius = 60,\n  maxValue = 100,\n  clockwise,\n  delay = 0,\n  value,\n  duration,\n  onAnimationComplete = () => null,\n  activeStrokeWidth = 10,\n  inActiveStrokeWidth = 10,\n  progressFormatter = (v: number) => {\n    'worklet';\n\n    return Math.round(v);\n  },\n}: UseAnimatedValueProps) {\n  const animatedValue = useSharedValue(initialValue);\n  const { circleCircumference } = useCircleValues({\n    radius,\n    activeStrokeWidth,\n    inActiveStrokeWidth,\n  });\n\n  const animatedCircleProps = useAnimatedProps(() => {\n    let biggestValue: number = Math.max(initialValue, maxValue);\n    biggestValue = biggestValue <= 0 ? 1 : biggestValue;\n    const maxPercentage: number = clockwise\n      ? (100 * animatedValue.value) / biggestValue\n      : (100 * -animatedValue.value) / biggestValue;\n    return {\n      strokeDashoffset:\n        circleCircumference - (circleCircumference * maxPercentage) / 100,\n    };\n  });\n\n  useEffect(() => {\n    animatedValue.value = withDelay(\n      delay,\n      withTiming(value, { duration, easing: Easing.linear }, (isFinished) => {\n        if (isFinished) {\n          runOnJS(onAnimationComplete)?.();\n        }\n      })\n    );\n  }, [value]);\n\n  const progressValue = useDerivedValue(() => {\n    return `${progressFormatter(animatedValue.value)}`;\n  });\n\n  const animatedTextProps = useAnimatedProps(() => {\n    return {\n      text: progressValue.value,\n    } as any;\n  });\n\n  return {\n    animatedCircleProps,\n    animatedTextProps,\n    progressValue,\n  };\n}\n"]}