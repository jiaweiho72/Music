{"version":3,"sources":["useCircleValues.ts"],"names":["useCircleValues","radius","activeStrokeWidth","inActiveStrokeWidth","isSameStrokeWidth","isActiveStrokeBigger","findRadius","inactiveCircleRadius","activeCircleRadius","circleCircumference","Math","PI"],"mappings":";;;;;;;AAAA;;AAQe,SAASA,eAAT,OAIU;AAAA,MAJe;AACtCC,IAAAA,MADsC;AAEtCC,IAAAA,iBAFsC;AAGtCC,IAAAA;AAHsC,GAIf;AACvB,QAAMC,iBAAiB,GAAG,oBACxB,MAAMF,iBAAiB,KAAKC,mBADJ,EAExB,CAACD,iBAAD,EAAoBC,mBAApB,CAFwB,CAA1B;AAKA,QAAME,oBAAoB,GAAG,oBAAQ,MAAM;AACzC,WAAOH,iBAAiB,GAAGC,mBAA3B;AACD,GAF4B,EAE1B,CAACD,iBAAD,EAAoBC,mBAApB,CAF0B,CAA7B;AAIA,QAAMG,UAAU,GAAG,wBAAY,MAAM;AACnC,QAAIF,iBAAJ,EAAuB;AACrB,aAAOH,MAAM,GAAGE,mBAAmB,GAAG,CAAtC;AACD;;AACD,QAAIE,oBAAJ,EAA0B;AACxB,aAAOJ,MAAM,GAAGC,iBAAiB,GAAG,CAApC;AACD;;AACD,WAAOD,MAAM,GAAGE,mBAAmB,GAAG,CAAtC;AACD,GARkB,EAQhB,CACDC,iBADC,EAEDC,oBAFC,EAGDJ,MAHC,EAIDE,mBAJC,EAKDD,iBALC,CARgB,CAAnB;AAgBA,QAAMK,oBAAoB,GAAG,oBAAQ,MAAMD,UAAU,EAAxB,EAA4B,CAACA,UAAD,CAA5B,CAA7B;AAEA,QAAME,kBAAkB,GAAG,oBAAQ,MAAMF,UAAU,EAAxB,EAA4B,CAACA,UAAD,CAA5B,CAA3B;AAEA,QAAMG,mBAAmB,GAAG,oBAAQ,MAAM,IAAIC,IAAI,CAACC,EAAT,GAAcH,kBAA5B,EAAgD,CAC1EA,kBAD0E,CAAhD,CAA5B;AAIA,SAAO;AACLD,IAAAA,oBADK;AAELC,IAAAA,kBAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["import { useCallback, useMemo } from 'react';\n\nexport interface UseCircleValuesProps {\n  radius: number;\n  activeStrokeWidth: number;\n  inActiveStrokeWidth: number;\n}\n\nexport default function useCircleValues({\n  radius,\n  activeStrokeWidth,\n  inActiveStrokeWidth,\n}: UseCircleValuesProps) {\n  const isSameStrokeWidth = useMemo(\n    () => activeStrokeWidth === inActiveStrokeWidth,\n    [activeStrokeWidth, inActiveStrokeWidth]\n  );\n\n  const isActiveStrokeBigger = useMemo(() => {\n    return activeStrokeWidth > inActiveStrokeWidth;\n  }, [activeStrokeWidth, inActiveStrokeWidth]);\n\n  const findRadius = useCallback(() => {\n    if (isSameStrokeWidth) {\n      return radius + inActiveStrokeWidth / 2;\n    }\n    if (isActiveStrokeBigger) {\n      return radius + activeStrokeWidth / 2;\n    }\n    return radius + inActiveStrokeWidth / 2;\n  }, [\n    isSameStrokeWidth,\n    isActiveStrokeBigger,\n    radius,\n    inActiveStrokeWidth,\n    activeStrokeWidth,\n  ]);\n\n  const inactiveCircleRadius = useMemo(() => findRadius(), [findRadius]);\n\n  const activeCircleRadius = useMemo(() => findRadius(), [findRadius]);\n\n  const circleCircumference = useMemo(() => 2 * Math.PI * activeCircleRadius, [\n    activeCircleRadius,\n  ]);\n\n  return {\n    inactiveCircleRadius,\n    activeCircleRadius,\n    circleCircumference,\n  };\n}\n"]}