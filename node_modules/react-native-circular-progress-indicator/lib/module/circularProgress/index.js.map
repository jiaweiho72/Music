{"version":3,"sources":["index.tsx"],"names":["React","useMemo","useRef","Text","TextInput","StyleSheet","View","Platform","Animated","useAnimatedReaction","ProgressCircle","useAnimatedValue","COLORS","styles","AnimatedInput","createAnimatedComponent","CircularProgress","value","initialValue","circleBackgroundColor","TRANSPARENT","radius","duration","delay","maxValue","strokeLinecap","onAnimationComplete","activeStrokeColor","GREEN","activeStrokeSecondaryColor","activeStrokeWidth","inActiveStrokeColor","BLACK_30","inActiveStrokeWidth","inActiveStrokeOpacity","clockwise","rotation","title","titleStyle","titleColor","titleFontSize","progressValueColor","progressValueStyle","progressValueFontSize","valuePrefix","valueSuffix","showProgressValue","subtitle","subtitleStyle","subtitleColor","subtitleFontSize","progressFormatter","v","Math","round","allowFontScaling","dashedStrokeConfig","count","width","valuePrefixStyle","valueSuffixStyle","animatedCircleProps","animatedTextProps","progressValue","inputRef","OS","data","prevData","current","styleProps","container","rotatingContainer","absoluteFillObject","valueContainer","valueContainerRow","input","fromProps"],"mappings":"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","sourcesContent":["import React, { useMemo, useRef } from 'react';\nimport { Text, TextInput, StyleSheet, View, Platform } from 'react-native';\nimport Animated, { useAnimatedReaction } from 'react-native-reanimated';\nimport ProgressCircle from '../components/progressCircle';\nimport useAnimatedValue from '../hooks/useAnimatedValue';\nimport COLORS from '../utils/colors';\nimport styles from './styles';\nimport type { CircularProgressProps } from '../types';\n\nconst AnimatedInput = Animated.createAnimatedComponent(TextInput);\n\nconst CircularProgress: React.FC<CircularProgressProps> = ({\n  value,\n  initialValue = 0,\n  circleBackgroundColor = COLORS.TRANSPARENT,\n  radius = 60,\n  duration = 500,\n  delay = 0,\n  maxValue = 100,\n  strokeLinecap = 'round',\n  onAnimationComplete = () => null,\n  activeStrokeColor = COLORS.GREEN,\n  activeStrokeSecondaryColor = null,\n  activeStrokeWidth = 10,\n  inActiveStrokeColor = COLORS.BLACK_30,\n  inActiveStrokeWidth = 10,\n  inActiveStrokeOpacity = 1,\n  clockwise = true,\n  rotation = 0,\n  title = '',\n  titleStyle = {},\n  titleColor,\n  titleFontSize,\n  progressValueColor,\n  progressValueStyle = {},\n  progressValueFontSize,\n  valuePrefix = '',\n  valueSuffix = '',\n  showProgressValue = true,\n  subtitle = '',\n  subtitleStyle = {},\n  subtitleColor,\n  subtitleFontSize,\n  progressFormatter = (v: number) => {\n    'worklet';\n\n    return Math.round(v);\n  },\n  allowFontScaling = true,\n  dashedStrokeConfig = { count: 0, width: 0 },\n  valuePrefixStyle = {},\n  valueSuffixStyle = {},\n}: CircularProgressProps) => {\n  const { animatedCircleProps, animatedTextProps, progressValue } =\n    useAnimatedValue({\n      initialValue,\n      radius,\n      maxValue,\n      clockwise,\n      delay,\n      value,\n      duration,\n      onAnimationComplete,\n      activeStrokeWidth,\n      inActiveStrokeWidth,\n      progressFormatter,\n    });\n\n  const inputRef = useRef<any>(null);\n\n  if (Platform.OS === 'web') {\n    // only run the reaction on web platform.\n    useAnimatedReaction(\n      () => {\n        return progressValue.value;\n      },\n      (data, prevData) => {\n        if (data !== prevData && inputRef.current) {\n          inputRef.current.value = data;\n        }\n      }\n    );\n  }\n\n  const styleProps = useMemo(\n    () => ({\n      radius,\n      rotation,\n      progressValueColor,\n      progressValueFontSize,\n      progressValueStyle,\n      activeStrokeColor,\n      titleStyle,\n      titleColor,\n      titleFontSize,\n      showProgressValue,\n      subtitleColor,\n      subtitleFontSize,\n      subtitleStyle,\n    }),\n    [\n      radius,\n      rotation,\n      progressValueColor,\n      progressValueFontSize,\n      progressValueStyle,\n      activeStrokeColor,\n      titleStyle,\n      titleColor,\n      titleFontSize,\n      showProgressValue,\n      subtitleColor,\n      subtitleFontSize,\n      subtitleStyle,\n    ]\n  );\n\n  return (\n    <View style={styles(styleProps).container}>\n      <View style={styles(styleProps).rotatingContainer}>\n        <ProgressCircle\n          circleBackgroundColor={circleBackgroundColor}\n          radius={radius}\n          strokeLinecap={strokeLinecap}\n          activeStrokeColor={activeStrokeColor}\n          activeStrokeSecondaryColor={activeStrokeSecondaryColor}\n          activeStrokeWidth={activeStrokeWidth}\n          inActiveStrokeColor={inActiveStrokeColor}\n          inActiveStrokeWidth={inActiveStrokeWidth}\n          inActiveStrokeOpacity={inActiveStrokeOpacity}\n          animatedCircleProps={animatedCircleProps}\n          dashedStrokeConfig={dashedStrokeConfig}\n        />\n      </View>\n      <View\n        style={[\n          StyleSheet.absoluteFillObject,\n          styles(styleProps).valueContainer,\n        ]}\n      >\n        {showProgressValue && (\n          <View style={styles(styleProps).valueContainerRow}>\n            {!!valuePrefix && (\n              <Text\n                style={[\n                  styles(styleProps).input,\n                  progressValueStyle,\n                  styles(styleProps).fromProps,\n                  valuePrefixStyle,\n                ]}\n              >\n                {valuePrefix}\n              </Text>\n            )}\n            <AnimatedInput\n              ref={inputRef}\n              underlineColorAndroid={COLORS.TRANSPARENT}\n              editable={false}\n              defaultValue={`${initialValue}`}\n              style={[\n                styles(styleProps).input,\n                progressValueStyle,\n                styles(styleProps).fromProps,\n              ]}\n              animatedProps={animatedTextProps}\n              allowFontScaling={allowFontScaling}\n            />\n            {!!valueSuffix && (\n              <Text\n                style={[\n                  styles(styleProps).input,\n                  progressValueStyle,\n                  styles(styleProps).fromProps,\n                  valueSuffixStyle,\n                ]}\n              >\n                {valueSuffix}\n              </Text>\n            )}\n          </View>\n        )}\n        {title && title !== '' ? (\n          <Text\n            style={[styles(styleProps).title, titleStyle]}\n            numberOfLines={1}\n            allowFontScaling={allowFontScaling}\n          >\n            {title}\n          </Text>\n        ) : null}\n        {subtitle && subtitle !== '' ? (\n          <Text\n            style={[\n              styles(styleProps).title,\n              styles(styleProps).subtitle,\n              subtitleStyle,\n            ]}\n            numberOfLines={1}\n            allowFontScaling={allowFontScaling}\n          >\n            {subtitle}\n          </Text>\n        ) : null}\n      </View>\n    </View>\n  );\n};\n\nexport default CircularProgress;\n"]}